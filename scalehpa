#!/usr/bin/env bash


[[ -n $DEBUG ]] && set -x

set -eou pipefail
IFS=$'\n\t'

SELF_CMD="$0"

SCALEHPA="${XDG_CACHE_HOME:-$HOME/.kube}/scalehpa"
OBJECTNAME=""
KIND=""
NAMESPACE=""
REPLICAS=""


usage() {
  local SELF
  SELF="scalehpa"
  if [[ "$(basename "$0")" == kubectl-* ]]; then # invoked as plugin
    SELF="kubectl scalehpa"
  fi

  cat <<EOF
USAGE:
  $SELF                       : list the hpa objects (native or keda)
  $SELF <NEW_NAME>=.          : rename current-context to <NEW_NAME>
  $SELF -d <NAME> [<NAME...>] : delete context <NAME> ('.' for current-context)
                                  (this command won't delete the user/cluster entry
                                  that is used by the context)
  $SELF -h,--help             : show this message
EOF
}

exit_err() {
   echo >&2 "${1}"
   exit 1
}

list_scaledobjects() {
  $KUBECTL get scaledobjects 
}

scale() {
  # Try to scale with keda. If it fails, scale with default method.
  # Not checking *why* it fails...
  $KUBECTL patch scaledobject $OBJECTNAME ${NAMESPACE} --type merge  -p '{"spec":{"minReplicaCount":'$REPLICAS'}}' 2> /dev/null || scale_default
}

scale_default() {
  $KUBECTL scale $KIND $OBJECTNAME ${NAMESPACE} --replicas=$REPLICAS
}

main() {
  if [[ -z "${KUBECTL:-}" ]]; then
    if hash kubectl 2>/dev/null; then
      KUBECTL=kubectl
    else
      echo >&2 "kubectl is not installed"
      exit 1
    fi
  fi
  if [[ -z "${GETOPT:-}" ]]; then
    if hash getopt 2>/dev/null; then
      GETOPT=getopt
    else
      echo >&2 "getopt is not installed"
      exit 1
    fi
  fi

  options=$(getopt -o n:r:h --long replicas: -- "$@")
  eval set -- "$options"
  while true; do
    case "$1" in
    -h)
        usage
        break
        ;;
    -n)
        shift; # The arg is next in position args
        NAMESPACE=$1
        ;;
    -r)
        shift; # The arg is next in position args
        REPLICAS=$1
        ;;
    --replicas)
        shift; # The arg is next in position args
        REPLICAS=$1
        ;;
    --)
        shift
        for opt in "$@"; do
          case "$opt" in
            "deploy")
              shift
              KIND="deploy"
              ;;
            "statefulset")
              shift
              KIND="statefulset"
              ;;
            "sts")
              shift
              KIND="sts"
              ;;
            *)
              shift
              OBJECTNAME=$opt
              ;;
          esac
        done
        break
        ;;
     *)
        break
        ;;
    esac
    shift
  done

  if [[ -n $NAMESPACE ]]; then
     NAMESPACE="-n"$NAMESPACE
  fi
  scale

}
main "$@"
