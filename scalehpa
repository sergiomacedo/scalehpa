#!/usr/bin/env bash

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Based on kubectx shell script

[[ -n $DEBUG ]] && set -x

#set -eou pipefail
IFS=$'\n\t'

OBJECTNAME=""
KIND=""
NAMESPACE=""
REPLICAS=""
MAXREPLICAS=""


usage() {
  local SELF
  SELF="scalehpa"
  if [[ "$(basename "$0")" == kubectl-* ]]; then # invoked as plugin
    SELF="kubectl scalehpa"
  fi

  cat <<EOF
Set a new size for a deployment or a statefulset when keda is installed.

Examples:
# Set a minimum number of replicas for the deployment on the default or current namespace
# This will set the minReplicas to 3 and keep HPA active
$SELF deploy foo --replicas=3
$SELF deploy foo -r 3

# This will set the maxReplicas to 10 and keep HPA active
$SELF deploy foo --maxreplicas=10
$SELF deploy foo -m 10

# This will set the minReplicas to 10, maxReplicas to 20 and keep HPA active
$SELF deploy foo -r 10 -m 20

# scale a deployment on the default or current namespace and DISABLE HPA
# This will create a fixed set of 3 replicas, disabling autoscale
# To reenable HPA, use the --replicas option
$SELF deploy foo --freeze=3

# scale a statefulset on a specific namespace
$SELF sts -r 3 foo -n bar
$SELF statefulset foo -n bar -r 3

# show this message
$SELF -h,--help
EOF

exit 0
}

exit_err() {
   echo >&2 "${1}"
   exit 1
}

setmax() {
  $KUBECTL patch scaledobject "$OBJECTNAME" ${NAMESPACE} --type merge  -p '{"spec":{"maxReplicaCount":'$MAXREPLICAS'}}' 2> /dev/null
}

scale() {
  # Try to scale with keda. If it fails, scale with default method.
  # Not checking *why* it fails...

  if [[ $REPLICAS -eq 0 ]]; then
    $KUBECTL annotate scaledobject "$OBJECTNAME" ${NAMESPACE} autoscaling.keda.sh/paused-replicas=0 --overwrite 2> /dev/null
  else
    $KUBECTL annotate scaledobject "$OBJECTNAME" ${NAMESPACE} autoscaling.keda.sh/paused-replicas- 2> /dev/null
  fi
  $KUBECTL patch scaledobject "$OBJECTNAME" ${NAMESPACE} --type merge  -p '{"spec":{"minReplicaCount":'$REPLICAS'}}' 2> /dev/null || \
  scale_default
}

freeze() {

  if [[ $REPLICAS ]]; then
    $KUBECTL annotate scaledobject "$OBJECTNAME" ${NAMESPACE} autoscaling.keda.sh/paused-replicas=$REPLICAS --overwrite 2> /dev/null
  fi
  scale_default
}

scale_default() {
  $KUBECTL scale $KIND "$OBJECTNAME" ${NAMESPACE} --replicas=$REPLICAS
}

main() {
  if [[ -z "${KUBECTL:-}" ]]; then
    if hash kubectl 2>/dev/null; then
      KUBECTL=kubectl
    else
      echo >&2 "kubectl is not installed"
      exit 1
    fi
  fi
  if [[ -z "${GETOPT:-}" ]]; then
    if hash getopt 2>/dev/null; then
      GETOPT=getopt
    else
      echo >&2 "getopt is not installed"
      exit 1
    fi
  fi

  if [[ $# -lt 4 ]]; then
    usage
  fi
  #if [[ $# -eq 4 ]]; then
  #fi

  options=$(getopt -o n:r:f:m:h --long replicas: --long freeze: --long max: -- "$@")
  eval set -- "$options"
  while true; do
    case "$1" in
    -h)
        usage
        break
        ;;
    -n)
        shift; # The arg is next in position args
        NAMESPACE=$1
        ;;
    -r)
        shift; # The arg is next in position args
        REPLICAS=$1
        ;;
    --replicas)
        shift; # The arg is next in position args
        REPLICAS=$1
        ;;
    -m)
        shift; # The arg is next in position args
        MAXREPLICAS=$1
        ;;
    --maxreplicas)
        shift; # The arg is next in position args
        MAXREPLICAS=$1
        ;;
    -f)
        shift; # The arg is next in position args
        FREEZE=true
        REPLICAS=$1
        ;;
    --freeze)
        shift; # The arg is next in position args
        FREEZE=true
        REPLICAS=$1
        ;;
    --)
        shift
        for opt in "$@"; do
          case "$opt" in
            "deploy")
              shift
              KIND="deploy"
              ;;
            "statefulset")
              shift
              KIND="statefulset"
              ;;
            "sts")
              shift
              KIND="sts"
              ;;
            *)
              shift
              OBJECTNAME=$opt
              ;;
          esac
        done
        break
        ;;
     *)
        break
        ;;
    esac
    shift
  done

  if [[ -n $NAMESPACE ]]; then
     NAMESPACE="-n"$NAMESPACE
  fi
  if [[ -n $MAXREPLICAS ]] ; then
     setmax
  fi
  if [[ -n $REPLICAS ]]; then
    if [ $FREEZE ]; then
      freeze
    else
      scale
    fi
  fi

}
main "$@"
